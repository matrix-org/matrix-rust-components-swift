// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(matrix_sdk_cryptoFFI)
import matrix_sdk_cryptoFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_matrix_sdk_crypto_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_matrix_sdk_crypto_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}


/**
 * Settings for decrypting messages
 */
public struct DecryptionSettings {
    /**
     * The trust level in the sender's device that is required to decrypt the
     * event. If the sender's device is not sufficiently trusted,
     * [`MegolmError::SenderIdentityNotTrusted`] will be returned.
     */
    public var senderDeviceTrustRequirement: TrustRequirement

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The trust level in the sender's device that is required to decrypt the
         * event. If the sender's device is not sufficiently trusted,
         * [`MegolmError::SenderIdentityNotTrusted`] will be returned.
         */senderDeviceTrustRequirement: TrustRequirement) {
        self.senderDeviceTrustRequirement = senderDeviceTrustRequirement
    }
}



extension DecryptionSettings: Equatable, Hashable {
    public static func ==(lhs: DecryptionSettings, rhs: DecryptionSettings) -> Bool {
        if lhs.senderDeviceTrustRequirement != rhs.senderDeviceTrustRequirement {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(senderDeviceTrustRequirement)
    }
}


public struct FfiConverterTypeDecryptionSettings: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DecryptionSettings {
        return
            try DecryptionSettings(
                senderDeviceTrustRequirement: FfiConverterTypeTrustRequirement.read(from: &buf)
        )
    }

    public static func write(_ value: DecryptionSettings, into buf: inout [UInt8]) {
        FfiConverterTypeTrustRequirement.write(value.senderDeviceTrustRequirement, into: &buf)
    }
}


public func FfiConverterTypeDecryptionSettings_lift(_ buf: RustBuffer) throws -> DecryptionSettings {
    return try FfiConverterTypeDecryptionSettings.lift(buf)
}

public func FfiConverterTypeDecryptionSettings_lower(_ value: DecryptionSettings) -> RustBuffer {
    return FfiConverterTypeDecryptionSettings.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Strategy to collect the devices that should receive room keys for the
 * current discussion.
 */

public enum CollectStrategy {
    
    /**
     * Share with all (unblacklisted) devices.
     */
    case allDevices
    /**
     * Share with all devices, except errors for *verified* users cause sharing
     * to fail with an error.
     *
     * In this strategy, if a verified user has an unsigned device,
     * key sharing will fail with a
     * [`SessionRecipientCollectionError::VerifiedUserHasUnsignedDevice`].
     * If a verified user has replaced their identity, key
     * sharing will fail with a
     * [`SessionRecipientCollectionError::VerifiedUserChangedIdentity`].
     *
     * Otherwise, keys are shared with unsigned devices as normal.
     *
     * Once the problematic devices are blacklisted or whitelisted the
     * caller can retry to share a second time.
     */
    case errorOnVerifiedUserProblem
    /**
     * Share based on identity. Only distribute to devices signed by their
     * owner. If a user has no published identity he will not receive
     * any room keys.
     */
    case identityBasedStrategy
    /**
     * Only share keys with devices that we "trust". A device is trusted if any
     * of the following is true:
     * - It was manually marked as trusted.
     * - It was marked as verified via interactive verification.
     * - It is signed by its owner identity, and this identity has been
     * trusted via interactive verification.
     * - It is the current own device of the user.
     */
    case onlyTrustedDevices
}


public struct FfiConverterTypeCollectStrategy: FfiConverterRustBuffer {
    typealias SwiftType = CollectStrategy

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CollectStrategy {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .allDevices
        
        case 2: return .errorOnVerifiedUserProblem
        
        case 3: return .identityBasedStrategy
        
        case 4: return .onlyTrustedDevices
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CollectStrategy, into buf: inout [UInt8]) {
        switch value {
        
        
        case .allDevices:
            writeInt(&buf, Int32(1))
        
        
        case .errorOnVerifiedUserProblem:
            writeInt(&buf, Int32(2))
        
        
        case .identityBasedStrategy:
            writeInt(&buf, Int32(3))
        
        
        case .onlyTrustedDevices:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeCollectStrategy_lift(_ buf: RustBuffer) throws -> CollectStrategy {
    return try FfiConverterTypeCollectStrategy.lift(buf)
}

public func FfiConverterTypeCollectStrategy_lower(_ value: CollectStrategy) -> RustBuffer {
    return FfiConverterTypeCollectStrategy.lower(value)
}



extension CollectStrategy: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The state of an identity - verified, pinned etc.
 */

public enum IdentityState {
    
    /**
     * The user is verified with us
     */
    case verified
    /**
     * Either this is the first identity we have seen for this user, or the
     * user has acknowledged a change of identity explicitly e.g. by
     * clicking OK on a notification.
     */
    case pinned
    /**
     * The user's identity has changed since it was pinned. The user should be
     * notified about this and given the opportunity to acknowledge the
     * change, which will make the new identity pinned.
     * When the user acknowledges the change, the app should call
     * [`crate::OtherUserIdentity::pin_current_master_key`].
     */
    case pinViolation
    /**
     * The user's identity has changed, and before that it was verified. This
     * is a serious problem. The user can either verify again to make this
     * identity verified, or withdraw verification
     * [`UserIdentity::withdraw_verification`] to make it pinned.
     */
    case verificationViolation
}


public struct FfiConverterTypeIdentityState: FfiConverterRustBuffer {
    typealias SwiftType = IdentityState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IdentityState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .verified
        
        case 2: return .pinned
        
        case 3: return .pinViolation
        
        case 4: return .verificationViolation
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: IdentityState, into buf: inout [UInt8]) {
        switch value {
        
        
        case .verified:
            writeInt(&buf, Int32(1))
        
        
        case .pinned:
            writeInt(&buf, Int32(2))
        
        
        case .pinViolation:
            writeInt(&buf, Int32(3))
        
        
        case .verificationViolation:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeIdentityState_lift(_ buf: RustBuffer) throws -> IdentityState {
    return try FfiConverterTypeIdentityState.lift(buf)
}

public func FfiConverterTypeIdentityState_lower(_ value: IdentityState) -> RustBuffer {
    return FfiConverterTypeIdentityState.lower(value)
}



extension IdentityState: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The local trust state of a device.
 */

public enum LocalTrust {
    
    /**
     * The device has been verified and is trusted.
     */
    case verified
    /**
     * The device been blacklisted from communicating.
     */
    case blackListed
    /**
     * The trust state of the device is being ignored.
     */
    case ignored
    /**
     * The trust state is unset.
     */
    case unset
}


public struct FfiConverterTypeLocalTrust: FfiConverterRustBuffer {
    typealias SwiftType = LocalTrust

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LocalTrust {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .verified
        
        case 2: return .blackListed
        
        case 3: return .ignored
        
        case 4: return .unset
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LocalTrust, into buf: inout [UInt8]) {
        switch value {
        
        
        case .verified:
            writeInt(&buf, Int32(1))
        
        
        case .blackListed:
            writeInt(&buf, Int32(2))
        
        
        case .ignored:
            writeInt(&buf, Int32(3))
        
        
        case .unset:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeLocalTrust_lift(_ buf: RustBuffer) throws -> LocalTrust {
    return try FfiConverterTypeLocalTrust.lift(buf)
}

public func FfiConverterTypeLocalTrust_lower(_ value: LocalTrust) -> RustBuffer {
    return FfiConverterTypeLocalTrust.lower(value)
}



extension LocalTrust: Equatable, Hashable {}




/**
 * Error type for the decoding of the [`QrCodeData`].
 */
public enum LoginQrCodeDecodeError {

    
    
    /**
     * The QR code data is no long enough, it's missing some fields.
     */
    case NotEnoughData(message: String)
    
    /**
     * One of the URLs in the QR code data is not a valid UTF-8 encoded string.
     */
    case NotUtf8(message: String)
    
    /**
     * One of the URLs in the QR code data could not be parsed.
     */
    case UrlParse(message: String)
    
    /**
     * The QR code data contains an invalid mode, we expect the login (0x03)
     * mode or the reciprocate mode (0x04).
     */
    case InvalidMode(message: String)
    
    /**
     * The QR code data contains an unsupported version.
     */
    case InvalidVersion(message: String)
    
    /**
     * The base64 encoded variant of the QR code data is not a valid base64
     * string.
     */
    case Base64(message: String)
    
    /**
     * The QR code data doesn't contain the expected `MATRIX` prefix.
     */
    case InvalidPrefix(message: String)
    
}


public struct FfiConverterTypeLoginQrCodeDecodeError: FfiConverterRustBuffer {
    typealias SwiftType = LoginQrCodeDecodeError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoginQrCodeDecodeError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .NotEnoughData(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .NotUtf8(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .UrlParse(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .InvalidMode(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .InvalidVersion(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .Base64(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .InvalidPrefix(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LoginQrCodeDecodeError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .NotEnoughData(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .NotUtf8(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .UrlParse(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .InvalidMode(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .InvalidVersion(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .Base64(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))
        case .InvalidPrefix(_ /* message is ignored*/):
            writeInt(&buf, Int32(7))

        
        }
    }
}


extension LoginQrCodeDecodeError: Equatable, Hashable {}

extension LoginQrCodeDecodeError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The result of a signature check.
 */

public enum SignatureState {
    
    /**
     * The signature is missing.
     */
    case missing
    /**
     * The signature is invalid.
     */
    case invalid
    /**
     * The signature is valid but the device or user identity that created the
     * signature is not trusted.
     */
    case validButNotTrusted
    /**
     * The signature is valid and the device or user identity that created the
     * signature is trusted.
     */
    case validAndTrusted
}


public struct FfiConverterTypeSignatureState: FfiConverterRustBuffer {
    typealias SwiftType = SignatureState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignatureState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .missing
        
        case 2: return .invalid
        
        case 3: return .validButNotTrusted
        
        case 4: return .validAndTrusted
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SignatureState, into buf: inout [UInt8]) {
        switch value {
        
        
        case .missing:
            writeInt(&buf, Int32(1))
        
        
        case .invalid:
            writeInt(&buf, Int32(2))
        
        
        case .validButNotTrusted:
            writeInt(&buf, Int32(3))
        
        
        case .validAndTrusted:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeSignatureState_lift(_ buf: RustBuffer) throws -> SignatureState {
    return try FfiConverterTypeSignatureState.lift(buf)
}

public func FfiConverterTypeSignatureState_lower(_ value: SignatureState) -> RustBuffer {
    return FfiConverterTypeSignatureState.lower(value)
}



extension SignatureState: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The trust level in the sender's device that is required to decrypt an
 * event.
 */

public enum TrustRequirement {
    
    /**
     * Decrypt events from everyone regardless of trust.
     */
    case untrusted
    /**
     * Only decrypt events from cross-signed devices or legacy sessions (Megolm
     * sessions created before we started collecting trust information).
     */
    case crossSignedOrLegacy
    /**
     * Only decrypt events from cross-signed devices.
     */
    case crossSigned
}


public struct FfiConverterTypeTrustRequirement: FfiConverterRustBuffer {
    typealias SwiftType = TrustRequirement

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TrustRequirement {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .untrusted
        
        case 2: return .crossSignedOrLegacy
        
        case 3: return .crossSigned
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TrustRequirement, into buf: inout [UInt8]) {
        switch value {
        
        
        case .untrusted:
            writeInt(&buf, Int32(1))
        
        
        case .crossSignedOrLegacy:
            writeInt(&buf, Int32(2))
        
        
        case .crossSigned:
            writeInt(&buf, Int32(3))
        
        }
    }
}


public func FfiConverterTypeTrustRequirement_lift(_ buf: RustBuffer) throws -> TrustRequirement {
    return try FfiConverterTypeTrustRequirement.lift(buf)
}

public func FfiConverterTypeTrustRequirement_lower(_ value: TrustRequirement) -> RustBuffer {
    return FfiConverterTypeTrustRequirement.lower(value)
}



extension TrustRequirement: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Our best guess at the reason why an event can't be decrypted.
 */

public enum UtdCause {
    
    /**
     * We don't have an explanation for why this UTD happened - it is probably
     * a bug, or a network split between the two homeservers.
     *
     * For example:
     *
     * - the keys for this event are missing, but a key storage backup exists
     * and is working, so we should be able to find the keys in the backup.
     *
     * - the keys for this event are missing, and a key storage backup exists
     * on the server, but that backup is not working on this client even
     * though this device is verified.
     */
    case unknown
    /**
     * We are missing the keys for this event, and the event was sent when we
     * were not a member of the room (or invited).
     */
    case sentBeforeWeJoined
    /**
     * The message was sent by a user identity we have not verified, but the
     * user was previously verified.
     */
    case verificationViolation
    /**
     * The [`crate::TrustRequirement`] requires that the sending device be
     * signed by its owner, and it was not.
     */
    case unsignedDevice
    /**
     * The [`crate::TrustRequirement`] requires that the sending device be
     * signed by its owner, and we were unable to securely find the device.
     *
     * This could be because the device has since been deleted, because we
     * haven't yet downloaded it from the server, or because the session
     * data was obtained from an insecure source (imported from a file,
     * obtained from a legacy (asymmetric) backup, unsafe key forward, etc.)
     */
    case unknownDevice
    /**
     * We are missing the keys for this event, but it is a "device-historical"
     * message and there is no key storage backup on the server, presumably
     * because the user has turned it off.
     *
     * Device-historical means that the message was sent before the current
     * device existed (but the current user was probably a member of the room
     * at the time the message was sent). Not to
     * be confused with pre-join or pre-invite messages (see
     * [`UtdCause::SentBeforeWeJoined`] for that).
     *
     * Expected message to user: "History is not available on this device".
     */
    case historicalMessageAndBackupIsDisabled
    /**
     * The keys for this event are intentionally withheld.
     *
     * The sender has refused to share the key because our device does not meet
     * the sender's security requirements.
     */
    case withheldForUnverifiedOrInsecureDevice
    /**
     * The keys for this event are missing, likely because the sender was
     * unable to share them (e.g., failure to establish an Olm 1:1
     * channel). Alternatively, the sender may have deliberately excluded
     * this device by cherry-picking and blocking it, in which case, no action
     * can be taken on our side.
     */
    case withheldBySender
    /**
     * We are missing the keys for this event, but it is a "device-historical"
     * message, and even though a key storage backup does exist, we can't use
     * it because our device is unverified.
     *
     * Device-historical means that the message was sent before the current
     * device existed (but the current user was probably a member of the room
     * at the time the message was sent). Not to
     * be confused with pre-join or pre-invite messages (see
     * [`UtdCause::SentBeforeWeJoined`] for that).
     *
     * Expected message to user: "You need to verify this device".
     */
    case historicalMessageAndDeviceIsUnverified
}


public struct FfiConverterTypeUtdCause: FfiConverterRustBuffer {
    typealias SwiftType = UtdCause

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UtdCause {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .unknown
        
        case 2: return .sentBeforeWeJoined
        
        case 3: return .verificationViolation
        
        case 4: return .unsignedDevice
        
        case 5: return .unknownDevice
        
        case 6: return .historicalMessageAndBackupIsDisabled
        
        case 7: return .withheldForUnverifiedOrInsecureDevice
        
        case 8: return .withheldBySender
        
        case 9: return .historicalMessageAndDeviceIsUnverified
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: UtdCause, into buf: inout [UInt8]) {
        switch value {
        
        
        case .unknown:
            writeInt(&buf, Int32(1))
        
        
        case .sentBeforeWeJoined:
            writeInt(&buf, Int32(2))
        
        
        case .verificationViolation:
            writeInt(&buf, Int32(3))
        
        
        case .unsignedDevice:
            writeInt(&buf, Int32(4))
        
        
        case .unknownDevice:
            writeInt(&buf, Int32(5))
        
        
        case .historicalMessageAndBackupIsDisabled:
            writeInt(&buf, Int32(6))
        
        
        case .withheldForUnverifiedOrInsecureDevice:
            writeInt(&buf, Int32(7))
        
        
        case .withheldBySender:
            writeInt(&buf, Int32(8))
        
        
        case .historicalMessageAndDeviceIsUnverified:
            writeInt(&buf, Int32(9))
        
        }
    }
}


public func FfiConverterTypeUtdCause_lift(_ buf: RustBuffer) throws -> UtdCause {
    return try FfiConverterTypeUtdCause.lift(buf)
}

public func FfiConverterTypeUtdCause_lower(_ value: UtdCause) -> RustBuffer {
    return FfiConverterTypeUtdCause.lower(value)
}



extension UtdCause: Equatable, Hashable {}



private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_matrix_sdk_crypto_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }

    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all